---
import Layout from "../layouts/Layout.astro";

// Interface pour les données Strapi
interface StrapiTitle {
  title: string;
  type: number;
}

// Valeur par défaut pour le titre de la page
let pageTitle = "Contactez-nous";

try {
  const response = await fetch(
    `${import.meta.env.PUBLIC_STRAPI_URL}/api/titles`
  );

  if (response.ok) {
    const { data } = await response.json();
    // Chercher le titre avec type = 4 (Contacts)
    const contactTitle = data?.find((item: StrapiTitle) => item.type === 4);
    if (contactTitle) {
      pageTitle = contactTitle.alt;
    }
  } else {
    console.error("Erreur lors de la récupération du titre");
  }
} catch (error) {
  console.error("Erreur:", error);
}
---

<Layout>
  <div class="flex-grow flex flex-col">
    <div class="max-w-6xl w-full mx-auto px-4 py-24">
      <div class="max-w-2xl mx-auto px-4">
        <div
          class="bg-gray-50 p-8 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300"
        >
          <!-- Titre -->
          <h1 class="text-4xl font-bold text-center mb-2">{pageTitle}</h1>
          <div class="flex justify-center mb-6">
            <div class="bg-beige h-1 w-32 rounded"></div>
          </div>
          <!-- Formulaire -->
          <form class="space-y-6" id="contactForm">
            <!-- Nom -->
            <div class="space-y-2">
              <label for="nom" class="block text-sm font-medium text-gray-700"
                >Nom*</label
              >
              <input
                type="text"
                id="nom"
                name="nom"
                required
                class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-beige focus:border-transparent transition"
                placeholder="Votre nom"
              />
            </div>

            <!-- Prénom -->
            <div class="space-y-2">
              <label
                for="prenom"
                class="block text-sm font-medium text-gray-700">Prénom*</label
              >
              <input
                type="text"
                id="prenom"
                name="prenom"
                required
                class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-beige focus:border-transparent transition"
                placeholder="Votre prénom"
              />
            </div>

            <!-- Téléphone -->
            <div class="space-y-2">
              <label
                for="telephone"
                class="block text-sm font-medium text-gray-700"
                >N° de téléphone</label
              >
              <input
                type="tel"
                id="telephone"
                name="telephone"
                class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-beige focus:border-transparent transition"
                placeholder="Votre numéro de téléphone"
              />
            </div>

            <!-- Email -->
            <div class="space-y-2">
              <label for="email" class="block text-sm font-medium text-gray-700"
                >Email*</label
              >
              <input
                type="email"
                id="email"
                name="email"
                required
                class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-beige focus:border-transparent transition"
                placeholder="votre@email.com"
              />
            </div>

            <!-- Sujet -->
            <div class="space-y-2">
              <label for="sujet" class="block text-sm font-medium text-gray-700"
                >Sujet*</label
              >
              <input
                type="text"
                id="sujet"
                name="sujet"
                required
                class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-beige focus:border-transparent transition"
                placeholder="Sujet de votre message"
              />
            </div>

            <!-- Message -->
            <div class="space-y-2">
              <label
                for="message"
                class="block text-sm font-medium text-gray-700">Message*</label
              >
              <textarea
                id="message"
                name="message"
                rows="5"
                required
                class="w-full p-3 border border-gray-200 rounded-lg focus:ring-2 focus:ring-beige focus:border-transparent transition"
                placeholder="Votre message"></textarea>
            </div>

            <p class="text-sm text-gray-600 text-center">
              * Champs obligatoires
            </p>

            <div class="flex justify-center">
              <button
                type="submit"
                class="bg-beige text-black px-8 py-3 rounded-lg hover:bg-opacity-90 transition-colors duration-300 font-medium"
              >
                Envoyer le formulaire
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Conteneur des notifications toast -->
      <div
        id="toast-container"
        class="fixed bottom-4 right-4 z-50 flex flex-col gap-2"
      >
      </div>
    </div>
  </div>

  <script define:vars={{ strapiUrl: import.meta.env.PUBLIC_STRAPI_URL }}>
    const form = document.getElementById("contactForm");
    if (!form) {
      console.error("Le formulaire n'a pas été trouvé");
      throw new Error("Le formulaire n'a pas été trouvé");
    }

    // Variable pour stocker le timestamp de la dernière soumission
    let lastSubmissionTime = 0;
    const SUBMISSION_DELAY = 60000; // 60 secondes de délai

    // Fonction pour créer et afficher un toast
    function showToast(message, type = "success") {
      const toast = document.createElement("div");
      toast.className = `p-4 rounded-lg shadow-lg transform transition-all duration-500 opacity-0 translate-x-full max-w-sm
        ${
          type === "success"
            ? "bg-green-100 text-green-800 border-l-4 border-green-500"
            : "bg-red-100 text-red-800 border-l-4 border-red-500"
        }`;

      toast.innerHTML = `
        <div class="flex items-center gap-2">
          ${
            type === "success"
              ? '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path></svg>'
              : '<svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path></svg>'
          }
          <p>${message}</p>
        </div>`;

      document.getElementById("toast-container").appendChild(toast);

      // Animation d'entrée
      requestAnimationFrame(() => {
        toast.classList.remove("opacity-0", "translate-x-full");
      });

      // Suppression automatique après 3 secondes
      setTimeout(() => {
        toast.classList.add("opacity-0", "translate-x-full");
        setTimeout(() => toast.remove(), 500);
      }, 3000);
    }

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      const now = Date.now();
      if (now - lastSubmissionTime < SUBMISSION_DELAY) {
        showToast("Veuillez attendre une minute entre chaque envoi.", "error");
        return;
      }

      const formData = new FormData(form);
      const data = Object.fromEntries(formData);

      try {
        const response = await fetch(`${strapiUrl}/api/contacts`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            data: {
              nom: data.nom,
              prenom: data.prenom,
              tel: data.telephone || null,
              email: data.email,
              sujet: data.sujet,
              message: data.message,
            },
          }),
        });

        if (response.ok) {
          lastSubmissionTime = now;
          showToast("Message envoyé avec succès !", "success");
          form.reset();
        } else {
          showToast(
            "Une erreur est survenue lors de l'envoi du message.",
            "error"
          );
        }
      } catch (error) {
        console.error("Erreur:", error);
        showToast(
          "Une erreur est survenue lors de l'envoi du message.",
          "error"
        );
      }
    });
  </script>
</Layout>
