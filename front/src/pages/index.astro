---
import Layout from "../layouts/Layout.astro";

// Interface pour les données Strapi
interface StrapiTitle {
  title: string;
  type: number;
}

interface TextBlock {
  title: string;
  content: string;
  order: number;
}

interface ResourceItem {
  id: number;
  title: string;
  description: string;
  image: { url: string };
  pdf: { url: string };
  order: number;
}

// Valeur par défaut pour le titre de la page
let pageTitle = "Lorem Ipsum Dolor";
let formations: ResourceItem[] = [];
let formationsSectionTitle = "Nos formations";
let textBlocks: TextBlock[] = [];

try {
  // Récupération du titre principal
  const response = await fetch(
    `${import.meta.env.PUBLIC_STRAPI_URL}/api/titles`
  );

  if (response.ok) {
    const { data } = await response.json();
    const homeTitle = data?.find((item: StrapiTitle) => item.type === 1);
    if (homeTitle) {
      pageTitle = homeTitle.title;
    }
  }

  // Récupération du titre de la section formations
  const cardTitleResponse = await fetch(
    `${import.meta.env.PUBLIC_STRAPI_URL}/api/card-titles?pagination[limit]=1`
  );
  if (cardTitleResponse.ok) {
    const { data } = await cardTitleResponse.json();
    if (data?.[0]?.title) {
      formationsSectionTitle = data[0].title;
    }
  }

  // Récupération des formations
  const formationsResponse = await fetch(
    `${import.meta.env.PUBLIC_STRAPI_URL}/api/cards?populate=*`
  );
  if (formationsResponse.ok) {
    const { data } = await formationsResponse.json();
    formations = data
      .map((item: ResourceItem) => ({
        id: item.id,
        title: item.title,
        description: item.description,
        image: `${import.meta.env.PUBLIC_STRAPI_URL}${item.image.url}`,
        pdf: `${import.meta.env.PUBLIC_STRAPI_URL}${item.pdf.url}`,
        order: item.order,
      }))
      .sort((a: ResourceItem, b: ResourceItem) => a.order - b.order)
      .slice(0, 3); // Limite à 3 formations
  }

  // Récupération des items "Forme 2"
  const shape2Response = await fetch(
    `${import.meta.env.PUBLIC_STRAPI_URL}/api/text-blocks`
  );
  if (shape2Response.ok) {
    const { data } = await shape2Response.json();
    textBlocks = data.map((item: any) => ({
      title: item.title,
      content: item.content,
      order: item.order,
    })).sort((a: TextBlock, b: TextBlock) => a.order - b.order);
  }
} catch (error) {
  console.error("Erreur:", error);
}
---

<Layout>
 <div class="flex-grow flex flex-col">
    <div class="max-w-6xl w-full mx-auto px-4 py-24">
      <!-- Contenu existant -->
      <h1 class="text-4xl font-bold text-center mb-2">
      {pageTitle}
    </h1>
    <div class="flex justify-center mb-16">
      <div class="bg-beige h-1 w-32 rounded"></div>
    </div>

    <!-- Section Formations -->
    <div class="mb-16">
      <h2 class="text-3xl font-bold text-center mb-2">
        {formationsSectionTitle}
      </h2>
      <div class="flex justify-center mb-6">
        <div class="bg-beige h-1 w-32 rounded"></div>
      </div>

      <div
        class={`grid grid-cols-1 gap-8 mt-12 ${
          formations.length === 1
            ? "md:grid-cols-1 max-w-xl mx-auto"
            : formations.length === 2
              ? "md:grid-cols-2 max-w-3xl mx-auto"
              : "md:grid-cols-2 lg:grid-cols-3"
        }`}
      >
        {
          formations.map((formation) => (
            <div class="bg-white rounded-lg overflow-hidden border border-gray-100 shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)] hover:shadow-[0_8px_25px_-5px_rgba(0,0,0,0.1),0_10px_20px_-5px_rgba(0,0,0,0.04)] transition-shadow duration-300">
              <img
                src={formation.image}
                alt={formation.title}
                class="w-full h-48 object-cover"
              />
              <div class="p-6">
                <h3 class="text-xl text-center font-bold mb-3">
                  {formation.title}
                </h3>
                <div class="flex justify-center mb-6">
                  <div class="bg-beige h-1 w-32 rounded" />
                </div>
                <p class="text-gray-600">{formation.description}</p>
                <a
                  href={formation.pdf}
                  target="_blank"
                  download
                  class="inline-block mt-4 px-6 py-2 bg-beige text-black rounded-lg hover:bg-opacity-90 transition-colors duration-300"
                >
                  En savoir plus
                </a>
              </div>
            </div>
          ))
        }  
    </div>
        <!-- ------- Forme 2 ------- -->
        {textBlocks.map((block) => (
          <div class="mt-16 mb-16 bg-white p-10 rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300">
            <!-- Titre -->
            <h2 class="text-3xl font-bold text-center mb-2">{block.title}</h2>
            <div class="flex justify-center mb-6">
              <div class="bg-beige h-1 w-32 rounded"></div>
            </div>
            <!-- Texte -->
            <p class="text-gray-700 text-center max-w-2xl mx-auto font-light">
              {block.content}
            </p>
          </div>
        ))}
      </div>
    </div>
  </div>


  
</Layout>
