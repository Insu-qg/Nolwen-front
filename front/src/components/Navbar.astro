---
// Récupération des données depuis Strapi
const response = await fetch(`${import.meta.env.PUBLIC_STRAPI_URL}/api/titles`);
const { data } = await response.json();

// Interface pour les données Strapi
interface StrapiTitle {
  title: string;
  type: number;
}

// Interface pour les données Strapi
interface MenuItem {
  name: string;
  href: string;
  icon: string;
  order: number;
}

const iconMapping = ["home", "book", "images", "file-alt", "calendar-alt"];

// Mapping des URLs pour chaque type
const urlMapping = [
  "/",
  "/formations",
  "/portfolio",
  "/contacts",
  "/calendrier",
];

const navItems = data?.map((item: StrapiTitle) => ({
  name: item.title,
  href: urlMapping[item.type - 1],
  icon: iconMapping[item.type - 1],
  order: item.type
})) .sort((a: MenuItem, b: MenuItem) => a.order - b.order);

// État du menu (géré par JavaScript)
---

<nav class="fixed top-0 left-0 right-0 z-50 bg-darkgray text-white p-4 font-sans shadow-md">
  <div class="max-w-6xl mx-auto">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <div class="flex items-center">
        <img
          src="/images/230112_Livraison_NolwenCeccon_logo.svg"
          alt="Logo"
          class="h-8 w-8 brightness-0 invert"
        />
      </div>

      <!-- Bouton Menu Mobile -->
      <button
        id="menuButton"
        class="lg:hidden flex items-center px-3 py-2 text-white hover:text-secondary"
        aria-label="Menu"
      >
        <i class="fas fa-bars text-2xl"></i>
      </button>

      <!-- Menu Navigation -->
      <div id="navMenu" class="hidden lg:flex flex-grow justify-center">
        <ul class="flex flex-col lg:flex-row items-center gap-6">
          {
            navItems?.map((item: MenuItem) => (
              <li class="w-full lg:w-auto">
                <a
                  href={item.href}
                  class="flex items-center gap-3 py-2 px-4 hover:text-secondary transition-colors duration-200"
                >
                  <i class={`fas fa-${item.icon} text-lg`} />
                  <span class="text-lg font-semibold">{item.name}</span>
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>
  </div>
</nav>

<style>
  /* Styles pour le menu mobile */
  @media (max-width: 1024px) {
    #navMenu.show {
      @apply block absolute top-16 left-0 right-0 bg-darkgray;
    }

    #navMenu:not(.show) {
      @apply hidden;
    }

    #navMenu ul {
      @apply p-4;
    }

    #navMenu li {
      @apply border-b border-gray-700 last:border-none;
    }

    #navMenu a {
      @apply block w-full py-3;
    }
  }
</style>

<script>
  // JavaScript pour gérer le menu mobile
  const menuButton = document.getElementById('menuButton');
  const navMenu = document.getElementById('navMenu');

  menuButton?.addEventListener('click', () => {
    navMenu?.classList.toggle('show');
    
    // Gestion de l'accessibilité
    const isExpanded = navMenu?.classList.contains('show');
    menuButton.setAttribute('aria-expanded', isExpanded ? 'true' : 'false');
  });

  // Fermer le menu si on clique en dehors
  document.addEventListener('click', (e) => {
    if (!menuButton?.contains(e.target as Node) && !navMenu?.contains(e.target as Node)) {
      navMenu?.classList.remove('show');
      menuButton?.setAttribute('aria-expanded', 'false');
    }
  });

  // Fermer le menu si la fenêtre est redimensionnée
  window.addEventListener('resize', () => {
    if (window.innerWidth >= 1024) {
      navMenu?.classList.remove('show');
      menuButton?.setAttribute('aria-expanded', 'false');
    }
  });
</script>
